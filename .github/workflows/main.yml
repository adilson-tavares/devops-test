name: CI-CD

on:
  push: 
    branches: ['main']
  workflow_dispatch: 
jobs: 
  ci: 
    runs-on: ubuntu-latest
    steps:
      - name: Obtem codigo do projeto
        uses: actions/checkout@v4

      - name: Autenticar no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construcao e Envio da Imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: | 
            tavarescruz/nginx:latest
            tavarescruz/nginx:v${{ github.run_number }}
  terraform:
    runs-on: ubuntu-latest
    needs: [ci]
    defaults:
      run:
        working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Obtem codigo do projeto
        uses: actions/checkout@v4

      - name: configura Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve


  cd:
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Obtem codigo do projeto
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Describe EC2 e Get no Instace_id
        run: |
          INSTANCE_ID="$(aws ec2 describe-instances --filters "Name="tag:Name", Values="server-nginx"
            --query "Reservations[0].Instances[0].{Instance:InstanceId}" \
            --output json)"
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV

      - name: Install Docker com Script via SSM
        run: |
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Instalando Docker" \
            --parameters commands="curl -fsSL https://get.docker.com | bash && sudo usermod -aG docker ubuntu && sudo systemctl enable docker && sudo systemctl start docker" \
            --output text




